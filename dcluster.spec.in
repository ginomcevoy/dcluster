
# THIS FILE NEEDS THE FOLLOWING INPUT:
#
#% define name <name>
#% define version <version>
#% define unmangled_version <version>
#% define release <release>
#% define mod_name <name>

# The first five lines are found in the SPEC file of setuptools
# the last line should be manually provided
# All this input should be provided by build-rpm.sh

# build Python3 by default, Python2 is optional
%bcond_with python2
%bcond_without python3
%define python2_sitelib /usr/lib/python2.7/site-packages/

# Run tests by default
%bcond_without tests

%if 0%{?rhel} > 7
%define pytest_exec pytest-3
%else
%define pytest_exec py.test
%endif

Name: %{mod_name}
Summary: Create and manage Docker clusters, optionally run Ansible on the cluster
Version: %{version}
Release: %{release}
Source0: %{mod_name}-%{unmangled_version}.tar.gz
License: MIT
Group: Development/Libraries
#BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
Prefix: %{_prefix}
BuildArch: noarch
Vendor: Giacomo Mc Evoy Valenzano <giacomo.valenzano@atos.net>
Url: https://github.com

Provides: %{mod_name}           = %{version}-%{release}
Requires: python-%{mod_name}    = %{version}-%{release}

%description
Create and manage Docker clusters, optionally run Ansible on the cluster.

%if 0%{?with_python2}

%package -n python2-%{mod_name}
Summary: Create and manage Docker clusters, optionally run Ansible on the cluster.
Provides: python-%{mod_name}       = %{version}-%{release}
Provides: python2-%{mod_name}      = %{version}-%{release}


# Names of Jinja2 and YAML python packages depend on distro
%if 0%{?rhel} > 7
Requires:  python2-jinja2
Requires:  python2-pyyaml
%else
Requires:  python-jinja2
Requires:  PyYAML
%endif

%if 0%{?with_tests}
BuildRequires:  python2-pytest

%if 0%{?rhel} > 7
BuildRequires:  python2-jinja2
BuildRequires:  python2-pyyaml
%else
BuildRequires:  python-jinja2
BuildRequires:  PyYAML
%endif

%endif

%description -n python2-%{mod_name}
Create and manage Docker clusters, optionally run Ansible on the cluster.

%endif

%if 0%{?with_python3}

%package -n python%{python3_pkgversion}-%{mod_name}
Summary: Create and manage Docker clusters, optionally run Ansible on the cluster.
Provides: python-%{mod_name}       = %{version}-%{release}
Provides: python%{python3_pkgversion}-%{mod_name}      = %{version}-%{release}

BuildRequires:  python%{python3_pkgversion}-rpm-macros
Requires:  python%{python3_pkgversion}-jinja2
Requires:  python%{python3_pkgversion}-pyyaml
# For RHEL 8+, use python3 explicitly
BuildRequires: /usr/bin/pathfix.py

%if 0%{?with_tests}
BuildRequires:  python%{python3_pkgversion}-jinja2
BuildRequires:  python%{python3_pkgversion}-pyyaml
BuildRequires:  python3-pytest
%endif

%description -n python%{python3_pkgversion}-%{mod_name}
Create and manage Docker clusters, optionally run Ansible on the cluster.

%endif


%prep
%setup -n %{mod_name}-%{unmangled_version} 


%build
%if 0%{?with_python2}
python2 setup.py build
%endif

%if 0%{?with_python3}
%{__python3} setup.py build
%endif


%install
%if 0%{?with_python2}

# install the python code to RPM_BUILD_ROOT
python2 setup.py install --single-version-externally-managed -O1 --root=$RPM_BUILD_ROOT

# create the production configuration, need DCLUSTER_INSTALL_PREFIX environment variable to deploy
export PYTHONPATH=.
export DCLUSTER_INSTALL_PREFIX=$RPM_BUILD_ROOT
python2 -m deployment.deploy

# deployment script has done its job
rm -rf %{buildroot}%{python2_sitelib}/deployment

%endif


%if 0%{?with_python3}

# install the python code to RPM_BUILD_ROOT
%{__python3} setup.py install --single-version-externally-managed -O1 --root=$RPM_BUILD_ROOT

# create the production configuration, need DCLUSTER_INSTALL_PREFIX environment variable to deploy
export PYTHONPATH=.
export DCLUSTER_INSTALL_PREFIX=$RPM_BUILD_ROOT
%{__python3} -m deployment.deploy

# deployment script has done its job
rm -rf %{buildroot}%{python3_sitelib}/deployment

# Fix Python shebangs
%if 0%{?rhel} > 7
pathfix.py -pni "%{__python3}" usr/bin/*
%endif

%endif

# the executable
mkdir -p $RPM_BUILD_ROOT/usr/bin


cp usr/bin/dcluster $RPM_BUILD_ROOT/usr/bin
cp usr/bin/dcluster-ansible $RPM_BUILD_ROOT/usr/bin

%check
%if 0%{?with_tests}

%if 0%{?with_python2}

# this is needed to find deployed files for testing, but before the RPM is installed
export DCLUSTER_INSTALL_PREFIX=%{buildroot}

# run the tests
export PYTHONPATH=%{buildroot}%{python2_sitelib}
pytest-2 --pyargs %{mod_name}

# cleanup pycache so that pytest does not complain later
rm -rf %{buildroot}%{python2_sitelib}/%{mod_name}/tests/__pycache__
%endif

%if 0%{?with_python3}

# this is needed to find deployed files for testing, but before the RPM is installed
export DCLUSTER_INSTALL_PREFIX=%{buildroot}

# run the tests
export PYTHONPATH=%{buildroot}%{python3_sitelib}
%{pytest_exec} -v %{mod_name} 

# cleanup pycache so that pytest does not complain later
rm -rf %{buildroot}%{python3_sitelib}/%{mod_name}/tests/__pycache__
%endif
%endif # tests


%clean
rm -rf $RPM_BUILD_ROOT

%files
/usr/bin/dcluster
/usr/bin/dcluster-ansible
/etc/dcluster
/usr/share/dcluster
%defattr(-,root,root)

%if 0%{?with_python2}
%files -n python2-%{mod_name}
%{python2_sitelib}/%{mod_name}
%{python2_sitelib}/%{mod_name}-*.egg-info
%defattr(-,root,root)
%endif

%if 0%{?with_python3}
%files -n python%{python3_pkgversion}-%{mod_name}
%{python3_sitelib}/%{mod_name}
%{python3_sitelib}/%{mod_name}-*.egg-info
%defattr(-,root,root)
%endif
